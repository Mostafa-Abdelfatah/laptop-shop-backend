User APIs:-

### **1) Get All Users (Search)**

**Endpoint:**
```
GET /user/getAllUsers
```

**Description:**
Retrieve a paginated list of users with optional filters and sorting by creation date.

**Query Parameters:**

| Parameter | Type    | Required | Default | Description                                                 |
| --------- | ------- | -------- | ------- | ----------------------------------------------------------- |
| `page`    | Integer | No       | `1`     | The page number to retrieve. Starts from 1.                 |
| `limit`   | Integer | No       | `10`    | The number of users to retrieve per page.                   |
| `Fname`   | String  | No       | `-`     | Filter users by their first name. (Case-insensitive search) |
| `Lname`   | String  | No       | `-`     | Filter users by their last name. (Case-insensitive search)  |
| `email`   | String  | No       | `-`     | Filter users by their email. (Case-insensitive search)      |
| `sort`    | String  | No       | `desc`  | Sort the results by creation date. Use `asc` or `desc`.     |

**Responses:**

#### **Success (200):**

```json
{
  "success": true,
  "totalUsers": 25,
  "currentPage": 1,
  "totalPages": 3,
  "data": [
    {
      "_id": "63a1b2c34f8e5c0024c6ef12",
      "Fname": "John",
      "Lname": "Doe",
      "email": "john.doe@example.com",
      "Date_created": "2024-12-19T10:10:30.511Z"
    },
    {
      "_id": "63a1b2c34f8e5c0024c6ef13",
      "Fname": "Jane",
      "Lname": "Smith",
      "email": "jane.smith@example.com",
      "Date_created": "2024-12-18T09:15:30.511Z"
    }
  ]
}
```

#### **Error Responses:**

| Status Code | Message                                    | Description                                |
| ----------- | ------------------------------------------ | ------------------------------------------ |
| `400`       | "Invalid sort value. Use 'asc' or 'desc'." | The provided `sort` parameter is invalid.  |
| `400`       | "Page must be a positive integer."         | The provided `page` parameter is invalid.  |
| `400`       | "Limit must be a positive integer."        | The provided `limit` parameter is invalid. |
| `404`       | "No users found"                           | No users match the filter criteria.        |
| `500`       | "Internal Server Error"                    | A server-side error occurred.              |

**Example Requests and Responses:**

- **Request:**
  ```
  GET /user/getAllUsers?page=2&limit=5&sort=asc
  ```
  **Response:**
  ```json
  {
    "success": true,
    "totalUsers": 100,
    "currentPage": 2,
    "totalPages": 20,
    "data": [
      {
        "_id": "63a1b2c34f8e5c0024c6ef15",
        "Fname": "Alice",
        "Lname": "Wonderland",
        "email": "alice@example.com",
        "Date_created": "2024-12-19T10:20:30.511Z"
      }
    ]
  }
  ```

**Notes:**
- If no query parameters are provided, the endpoint returns the first page of users with 10 users per page, sorted by descending creation date.
- Optional query parameters (e.g., `Fname`, `Lname`, `email`) allow flexible filtering.

---

### **2) Get User by ID**

**Endpoint:**
```
GET /user/getUserById/:id
```

**Description:**
Retrieve a single user by their unique ID.

**Path Parameters:**

| Parameter | Type   | Required | Description                        |
| --------- | ------ | -------- | ---------------------------------- |
| `id`      | String | Yes      | The unique identifier of the user. |

**Responses:**

#### **Success (200):**

```json
{
  "_id": "63a1b2c34f8e5c0024c6ef12",
  "Fname": "John",
  "Lname": "Doe",
  "email": "john.doe@example.com",
  "Date_created": "2024-12-19T10:10:30.511Z"
}
```

#### **Error Responses:**

| Status Code | Message                 | Description                       |
| ----------- | ----------------------- | --------------------------------- |
| `404`       | "User not found"        | No user exists with the given ID. |
| `500`       | "Internal Server Error" | A server-side error occurred.     |

**Example Requests and Responses:**

- **Request:**
  ```
  GET /user/getUserById/63a1b2c34f8e5c0024c6ef12
  ```
  **Response:**
  ```json
  {
    "_id": "63a1b2c34f8e5c0024c6ef12",
    "Fname": "John",
    "Lname": "Doe",
    "email": "john.doe@example.com",
    "Date_created": "2024-12-19T10:10:30.511Z"
  }
  ```

**Notes:**
- Use this endpoint to fetch detailed information about a user using their unique ID.

---

### **3) Get User by Email**

**Endpoint:**
```
GET /user/getUserByEmail/:email
```

**Description:**
Retrieve a single user by their email address.

**Path Parameters:**

| Parameter | Type   | Required | Description                    |
| --------- | ------ | -------- | ------------------------------ |
| `email`   | String | Yes      | The email address of the user. |

**Responses:**

#### **Success (200):**

```json
{
  "_id": "63a1b2c34f8e5c0024c6ef13",
  "Fname": "Jane",
  "Lname": "Smith",
  "email": "jane.smith@example.com",
  "Date_created": "2024-12-18T09:15:30.511Z"
}
```

#### **Error Responses:**

| Status Code | Message                 | Description                          |
| ----------- | ----------------------- | ------------------------------------ |
| `404`       | "User not found"        | No user exists with the given email. |
| `500`       | "Internal Server Error" | A server-side error occurred.        |

**Example Requests and Responses:**

- **Request:**
  ```
  GET /user/getUserByEmail/jane.smith@example.com
  ```
  **Response:**
  ```json
  {
    "_id": "63a1b2c34f8e5c0024c6ef13",
    "Fname": "Jane",
    "Lname": "Smith",
    "email": "jane.smith@example.com",
    "Date_created": "2024-12-18T09:15:30.511Z"
  }
  ```

**Notes:**
- This endpoint is useful for searching users directly by their email addresses.

---

### **4) Add User**

**Endpoint:**
```
POST /user/addUser
```

**Description:**
Create a new user with the provided details.

**Request Body:**

| Field      | Type   | Required | Description                                |
| ---------- | ------ | -------- | ------------------------------------------ |
| `Fname`    | String | Yes      | The first name of the user.                |
| `Lname`    | String | No       | The last name of the user.                 |
| `email`    | String | Yes      | The email address of the user.             |
| `password` | String | Yes      | The password for the user. Will be hashed. |

**Responses:**

#### **Success (201):**

```json
{
  "_id": "63a1b2c34f8e5c0024c6ef12",
  "Fname": "John",
  "Lname": "Doe",
  "email": "john.doe@example.com",
  "Date_created": "2024-12-19T10:10:30.511Z"
}
```

#### **Error Responses:**

| Status Code | Message                 | Description                   |
| ----------- | ----------------------- | ----------------------------- |
| `500`       | "Internal Server Error"| A server-side error occurred. |

**Example Requests and Responses:**

- **Request:**
  ```
  POST /user/addUser
  Content-Type: application/json
  {
    "Fname": "John",
    "Lname": "Doe",
    "email": "john.doe@example.com",
    "password": "securepassword"
  }
  ```
  **Response:**
  ```json
  {
    "_id": "63a1b2c34f8e5c0024c6ef12",
    "Fname": "John",
    "Lname": "Doe",
    "email": "john.doe@example.com",
    "Date_created": "2024-12-19T10:10:30.511Z"
  }
  ```

**Notes:**
- Passwords are securely hashed before storing them in the database.

---

### **5) Update User by ID**

**Endpoint:**
```
PUT /user/updateUserById/:id
```

**Description:**
Update user details by their unique ID.

**Path Parameters:**

| Parameter | Type   | Required | Description                        |
| --------- | ------ | -------- | ---------------------------------- |
| `id`      | String | Yes      | The unique identifier of the user. |

**Request Body:**

| Field      | Type   | Required | Description                                |
| ---------- | ------ | -------- | ------------------------------------------ |
| `Fname`    | String | No       | The first name of the user.                |
| `Lname`    | String | No       | The last name of the user.                 |
| `email`    | String | No       | The email address of the user.             |
| `password` | String | No       | The password for the user. Will be hashed. |

**Responses:**

#### **Success (200):**

```json
{
  "message": "User updated successfully",
  "user": {
    "_id": "63a1b2c34f8e5c0024c6ef12",
    "Fname": "John",
    "Lname": "Doe",
    "email": "john.doe@example.com",
    "Date_updated": "2024-12-19T10:15:30.511Z"
  }
}
```

#### **Error Responses:**

| Status Code | Message                 | Description                       |
| ----------- | ----------------------- | --------------------------------- |
| `404`       | "User not found"        | No user exists with the given ID. |
| `500`       | "Internal Server Error" | A server-side error occurred.     |

**Example Requests and Responses:**

- **Request:**
  ```
  PUT /user/updateUserById/63a1b2c34f8e5c0024c6ef12
  Content-Type: application/json
  {
    "Fname": "Johnny",
    "email": "johnny.doe@example.com"
  }
  ```
  **Response:**
  ```json
  {
    "message": "User updated successfully",
    "user": {
      "_id": "63a1b2c34f8e5c0024c6ef12",
      "Fname": "Johnny",
      "Lname": "Doe",
      "email": "johnny.doe@example.com",
      "Date_updated": "2024-12-19T10:15:30.511Z"
    }
  }
  ```

**Notes:**
- Only the provided fields will be updated. Fields not included in the request body will remain unchanged.

---

### **6) Delete User by ID**

**Endpoint:**
```
DELETE /user/deleteUserById/:id
```

**Description:**
Delete a user by their unique ID.

**Path Parameters:**

| Parameter | Type   | Required | Description                        |
| --------- | ------ | -------- | ---------------------------------- |
| `id`      | String | Yes      | The unique identifier of the user. |

**Responses:**

#### **Success (200):**

```json
{
  "message": "User deleted successfully"
}
```

#### **Error Responses:**

| Status Code | Message                 | Description                       |
| ----------- | ----------------------- | --------------------------------- |
| `404`       | "User not found"        | No user exists with the given ID. |
| `500`       | "Internal Server Error" | A server-side error occurred.     |

**Example Requests and Responses:**

- **Request:**
  ```
  DELETE /user/deleteUserById/63a1b2c34f8e5c0024c6ef12
  ```
  **Response:**
  ```json
  {
    "message": "User deleted successfully"
  }
  ```

**Notes:**
- This operation is irreversible. Ensure the correct user ID is provided before deletion.