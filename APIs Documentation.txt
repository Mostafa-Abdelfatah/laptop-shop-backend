User APIs:-

### **1) Get All Users (Search)**

**Endpoint:**
```
GET /user/getAllUsers
```

**Description:**
Retrieve a paginated list of users with optional filters and sorting by creation date.

**Query Parameters:**

| Parameter | Type    | Required | Default | Description                                                 |
| --------- | ------- | -------- | ------- | ----------------------------------------------------------- |
| `page`    | Integer | No       | `1`     | The page number to retrieve. Starts from 1.                 |
| `limit`   | Integer | No       | `10`    | The number of users to retrieve per page.                   |
| `Fname`   | String  | No       | `-`     | Filter users by their first name. (Case-insensitive search) |
| `Lname`   | String  | No       | `-`     | Filter users by their last name. (Case-insensitive search)  |
| `email`   | String  | No       | `-`     | Filter users by their email. (Case-insensitive search)      |
| `sort`    | String  | No       | `desc`  | Sort the results by creation date. Use `asc` or `desc`.     |

**Responses:**

#### **Success (200):**

```json
{
  "success": true,
  "totalUsers": 25,
  "currentPage": 1,
  "totalPages": 3,
  "data": [
    {
      "_id": "63a1b2c34f8e5c0024c6ef12",
      "Fname": "John",
      "Lname": "Doe",
      "email": "john.doe@example.com",
      "Date_created": "2024-12-19T10:10:30.511Z"
    },
    {
      "_id": "63a1b2c34f8e5c0024c6ef13",
      "Fname": "Jane",
      "Lname": "Smith",
      "email": "jane.smith@example.com",
      "Date_created": "2024-12-18T09:15:30.511Z"
    }
  ]
}
```

#### **Error Responses:**

| Status Code | Message                                    | Description                                |
| ----------- | ------------------------------------------ | ------------------------------------------ |
| `400`       | "Invalid sort value. Use 'asc' or 'desc'." | The provided `sort` parameter is invalid.  |
| `400`       | "Page must be a positive integer."         | The provided `page` parameter is invalid.  |
| `400`       | "Limit must be a positive integer."        | The provided `limit` parameter is invalid. |
| `404`       | "No users found"                           | No users match the filter criteria.        |
| `500`       | "Internal Server Error"                    | A server-side error occurred.              |

**Example Requests and Responses:**

- **Request:**
  ```
  GET /user/getAllUsers?page=2&limit=5&sort=asc
  ```
  **Response:**
  ```json
  {
    "success": true,
    "totalUsers": 100,
    "currentPage": 2,
    "totalPages": 20,
    "data": [
      {
        "_id": "63a1b2c34f8e5c0024c6ef15",
        "Fname": "Alice",
        "Lname": "Wonderland",
        "email": "alice@example.com",
        "Date_created": "2024-12-19T10:20:30.511Z"
      }
    ]
  }
  ```

**Notes:**
- If no query parameters are provided, the endpoint returns the first page of users with 10 users per page, sorted by descending creation date.
- Optional query parameters (e.g., `Fname`, `Lname`, `email`) allow flexible filtering.

---

### **2) Get User by ID**

**Endpoint:**
```
GET /user/getUserById/:id
```

**Description:**
Retrieve a single user by their unique ID.

**Path Parameters:**

| Parameter | Type   | Required | Description                        |
| --------- | ------ | -------- | ---------------------------------- |
| `id`      | String | Yes      | The unique identifier of the user. |

**Responses:**

#### **Success (200):**

```json
{
  "_id": "63a1b2c34f8e5c0024c6ef12",
  "Fname": "John",
  "Lname": "Doe",
  "email": "john.doe@example.com",
  "Date_created": "2024-12-19T10:10:30.511Z"
}
```

#### **Error Responses:**

| Status Code | Message                 | Description                       |
| ----------- | ----------------------- | --------------------------------- |
| `404`       | "User not found"        | No user exists with the given ID. |
| `500`       | "Internal Server Error" | A server-side error occurred.     |

**Example Requests and Responses:**

- **Request:**
  ```
  GET /user/getUserById/63a1b2c34f8e5c0024c6ef12
  ```
  **Response:**
  ```json
  {
    "_id": "63a1b2c34f8e5c0024c6ef12",
    "Fname": "John",
    "Lname": "Doe",
    "email": "john.doe@example.com",
    "Date_created": "2024-12-19T10:10:30.511Z"
  }
  ```

**Notes:**
- Use this endpoint to fetch detailed information about a user using their unique ID.

---

### **3) Get User by Email**

**Endpoint:**
```
GET /user/getUserByEmail/:email
```

**Description:**
Retrieve a single user by their email address.

**Path Parameters:**

| Parameter | Type   | Required | Description                    |
| --------- | ------ | -------- | ------------------------------ |
| `email`   | String | Yes      | The email address of the user. |

**Responses:**

#### **Success (200):**

```json
{
  "_id": "63a1b2c34f8e5c0024c6ef13",
  "Fname": "Jane",
  "Lname": "Smith",
  "email": "jane.smith@example.com",
  "Date_created": "2024-12-18T09:15:30.511Z"
}
```

#### **Error Responses:**

| Status Code | Message                 | Description                          |
| ----------- | ----------------------- | ------------------------------------ |
| `404`       | "User not found"        | No user exists with the given email. |
| `500`       | "Internal Server Error" | A server-side error occurred.        |

**Example Requests and Responses:**

- **Request:**
  ```
  GET /user/getUserByEmail/jane.smith@example.com
  ```
  **Response:**
  ```json
  {
    "_id": "63a1b2c34f8e5c0024c6ef13",
    "Fname": "Jane",
    "Lname": "Smith",
    "email": "jane.smith@example.com",
    "Date_created": "2024-12-18T09:15:30.511Z"
  }
  ```

**Notes:**
- This endpoint is useful for searching users directly by their email addresses.

---

### **4) Add User**

**Endpoint:**
```
POST /user/addUser
```

**Description:**
Create a new user with the provided details.

**Request Body:**

| Field      | Type   | Required | Description                                |
| ---------- | ------ | -------- | ------------------------------------------ |
| `Fname`    | String | Yes      | The first name of the user.                |
| `Lname`    | String | No       | The last name of the user.                 |
| `email`    | String | Yes      | The email address of the user.             |
| `password` | String | Yes      | The password for the user. Will be hashed. |

**Responses:**

#### **Success (201):**

```json
{
  "_id": "63a1b2c34f8e5c0024c6ef12",
  "Fname": "John",
  "Lname": "Doe",
  "email": "john.doe@example.com",
  "Date_created": "2024-12-19T10:10:30.511Z"
}
```

#### **Error Responses:**

| Status Code | Message                 | Description                   |
| ----------- | ----------------------- | ----------------------------- |
| `500`       | "Internal Server Error"| A server-side error occurred. |

**Example Requests and Responses:**

- **Request:**
  ```
  POST /user/addUser
  Content-Type: application/json
  {
    "Fname": "John",
    "Lname": "Doe",
    "email": "john.doe@example.com",
    "password": "securepassword"
  }
  ```
  **Response:**
  ```json
  {
    "_id": "63a1b2c34f8e5c0024c6ef12",
    "Fname": "John",
    "Lname": "Doe",
    "email": "john.doe@example.com",
    "Date_created": "2024-12-19T10:10:30.511Z"
  }
  ```

**Notes:**
- Passwords are securely hashed before storing them in the database.

---

### **5) Update User by ID**

**Endpoint:**
```
PUT /user/updateUserById/:id
```

**Description:**
Update user details by their unique ID.

**Path Parameters:**

| Parameter | Type   | Required | Description                        |
| --------- | ------ | -------- | ---------------------------------- |
| `id`      | String | Yes      | The unique identifier of the user. |

**Request Body:**

| Field      | Type   | Required | Description                                |
| ---------- | ------ | -------- | ------------------------------------------ |
| `Fname`    | String | No       | The first name of the user.                |
| `Lname`    | String | No       | The last name of the user.                 |
| `email`    | String | No       | The email address of the user.             |
| `password` | String | No       | The password for the user. Will be hashed. |

**Responses:**

#### **Success (200):**

```json
{
  "message": "User updated successfully",
  "user": {
    "_id": "63a1b2c34f8e5c0024c6ef12",
    "Fname": "John",
    "Lname": "Doe",
    "email": "john.doe@example.com",
    "Date_updated": "2024-12-19T10:15:30.511Z"
  }
}
```

#### **Error Responses:**

| Status Code | Message                 | Description                       |
| ----------- | ----------------------- | --------------------------------- |
| `404`       | "User not found"        | No user exists with the given ID. |
| `500`       | "Internal Server Error" | A server-side error occurred.     |

**Example Requests and Responses:**

- **Request:**
  ```
  PUT /user/updateUserById/63a1b2c34f8e5c0024c6ef12
  Content-Type: application/json
  {
    "Fname": "Johnny",
    "email": "johnny.doe@example.com"
  }
  ```
  **Response:**
  ```json
  {
    "message": "User updated successfully",
    "user": {
      "_id": "63a1b2c34f8e5c0024c6ef12",
      "Fname": "Johnny",
      "Lname": "Doe",
      "email": "johnny.doe@example.com",
      "Date_updated": "2024-12-19T10:15:30.511Z"
    }
  }
  ```

**Notes:**
- Only the provided fields will be updated. Fields not included in the request body will remain unchanged.

---

### **6) Delete User by ID**

**Endpoint:**
```
DELETE /user/deleteUserById/:id
```

**Description:**
Delete a user by their unique ID.

**Path Parameters:**

| Parameter | Type   | Required | Description                        |
| --------- | ------ | -------- | ---------------------------------- |
| `id`      | String | Yes      | The unique identifier of the user. |

**Responses:**

#### **Success (200):**

```json
{
  "message": "User deleted successfully"
}
```

#### **Error Responses:**

| Status Code | Message                 | Description                       |
| ----------- | ----------------------- | --------------------------------- |
| `404`       | "User not found"        | No user exists with the given ID. |
| `500`       | "Internal Server Error" | A server-side error occurred.     |

**Example Requests and Responses:**

- **Request:**
  ```
  DELETE /user/deleteUserById/63a1b2c34f8e5c0024c6ef12
  ```
  **Response:**
  ```json
  {
    "message": "User deleted successfully"
  }
  ```

**Notes:**
- This operation is irreversible. Ensure the correct user ID is provided before deletion.
-----------------------------------------------------------------------------------------------------------------------------------

### Laptop APIs

---

### **1) Get All Laptops**

**Endpoint:**
```
GET /laptop/getAllLaptops
```

**Description:**
Retrieve a paginated list of laptops with optional limit and page queries.

**Query Parameters:**

| Parameter | Type    | Required | Default | Description                                  |
| --------- | ------- | -------- | ------- | -------------------------------------------- |
| `page`    | Integer | No       | `1`     | The page number to retrieve. Starts from 1.  |
| `limit`   | Integer | No       | `10`    | The number of laptops to retrieve per page.  |

**Responses:**

#### **Success (200):**
```json
{
  "totalLaptops": 50,
  "totalPages": 5,
  "currentPage": 1,
  "laptops": [
    {
      "_id": "64a61b09c2d7e9ff3a6e1234",
      "name": "Dell Inspiron",
      "description": "Affordable laptop",
      "stock": 10,
      "price": 800,
      "photo": "https://example.com/dell-inspiron.jpg",
      "Date_created": "2024-12-18T12:00:00.000Z",
      "Date_updated": "2024-12-18T12:00:00.000Z"
    }
  ]
}
```

#### **Error Responses:**

| Status Code | Message                                    | Description                                |
| ----------- | ------------------------------------------ | ------------------------------------------ |
| `500`       | "Internal Server Error"                    | A server-side error occurred.              |

---

### **2) Get Laptops by Name**

**Endpoint:**
```
GET /laptop/getLaptopsByName/:name
```

**Description:**
Retrieve laptops with a name matching the query, using pagination.

**Path Parameters:**

| Parameter | Type   | Required | Description                          |
| --------- | ------ | -------- | ------------------------------------ |
| `name`    | String | Yes      | The partial or full name of a laptop.|

**Query Parameters:**

| Parameter | Type    | Required | Default | Description                                  |
| --------- | ------- | -------- | ------- | -------------------------------------------- |
| `page`    | Integer | No       | `1`     | The page number to retrieve. Starts from 1.  |
| `limit`   | Integer | No       | `10`    | The number of laptops to retrieve per page.  |

**Responses:**

#### **Success (200):**
```json
{
  "totalLaptops": 2,
  "totalPages": 1,
  "currentPage": 1,
  "laptops": [
    {
      "_id": "64a61b09c2d7e9ff3a6e1234",
      "name": "Dell Inspiron",
      "description": "Affordable laptop",
      "stock": 10,
      "price": 800,
      "photo": "https://example.com/dell-inspiron.jpg",
      "Date_created": "2024-12-18T12:00:00.000Z",
      "Date_updated": "2024-12-18T12:00:00.000Z"
    },
    {
      "_id": "64a61b09c2d7e9ff3a6e1235",
      "name": "Dell XPS",
      "description": "High-performance laptop",
      "stock": 5,
      "price": 1500,
      "photo": "https://example.com/dell-xps.jpg",
      "Date_created": "2024-12-18T12:00:00.000Z",
      "Date_updated": "2024-12-18T12:00:00.000Z"
    }
  ]
}
```

#### **Error Responses:**

| Status Code | Message                         | Description                                |
| ----------- | ------------------------------- | ------------------------------------------ |
| `404`       | "No laptops found with this name" | No laptops matched the search query.     |
| `500`       | "Internal Server Error"         | A server-side error occurred.              |

---

### **3) Get Laptop by ID**

**Endpoint:**
```
GET /laptop/getLaptopById/:id
```

**Description:**
Retrieve a laptop by its unique ID.

**Path Parameters:**

| Parameter | Type   | Required | Description                   |
| --------- | ------ | -------- | ----------------------------- |
| `id`      | String | Yes      | The unique ID of the laptop.  |

**Responses:**

#### **Success (200):**
```json
{
  "_id": "64a61b09c2d7e9ff3a6e1234",
  "name": "Dell Inspiron",
  "description": "Affordable laptop",
  "stock": 10,
  "price": 800,
  "photo": "https://example.com/dell-inspiron.jpg",
  "Date_created": "2024-12-18T12:00:00.000Z",
  "Date_updated": "2024-12-18T12:00:00.000Z"
}
```

#### **Error Responses:**

| Status Code | Message                 | Description                                |
| ----------- | ----------------------- | ------------------------------------------ |
| `404`       | "Laptop not found"      | No laptop exists with the given ID.        |
| `500`       | "Internal Server Error" | A server-side error occurred.              |

---

### **4) Add Laptop**

**Endpoint:**
```
POST /laptop/addLaptop
```

**Description:**
Add a new laptop to the inventory.

**Request Body:**

| Field         | Type    | Required | Description                         |
| ------------- | ------- | -------- | ------------------------------------|
| `name`        | String  | Yes      | The name of the laptop.             |
| `description` | String  | Yes      | The description of the laptop.      |
| `photo`       | String  | No       | URL for the laptop photo.           |
| `stock`       | Integer | Yes      | The number of units in stock.       |
| `price`       | Number  | Yes      | The price of the laptop.            |
|`category_id`  | ObjectId| Yes      | every laptop should have a category |

**Responses:**

#### **Success (201):**
```json
{
  "message": "Laptop added successfully",
  "laptop": {
    "_id": "64a61b09c2d7e9ff3a6e1234",
    "name": "Dell Inspiron",
    "description": "Affordable laptop",
    "stock": 10,
    "price": 800,
    "photo": "https://example.com/dell-inspiron.jpg",
    "Date_created": "2024-12-18T12:00:00.000Z",
    "Date_updated": "2024-12-18T12:00:00.000Z"
  }
}
```

#### **Error Responses:**

| Status Code | Message                 | Description                     |
| ----------- | ----------------------- | --------------------------------|
| `400`       | "Invalid data"          | Missing or invalid request data.|
| `500`       | "Internal Server Error" | A server-side error occurred.   |

---

### **5) Update Laptop by ID**

**Endpoint:**
```
PUT /laptop/updateLaptopById/:id
```

**Description:**
Update the details of a laptop by its unique ID.

**Path Parameters:**

| Parameter | Type   | Required | Description                   |
| --------- | ------ | -------- | ----------------------------- |
| `id`      | String | Yes      | The unique ID of the laptop.  |

**Request Body:**

| Field         | Type    | Required | Description                   |
| ------------- | ------- | -------- | ----------------------------- |
| `name`        | String  | No       | The name of the laptop.       |
| `description` | String  | No       | The description of the laptop.|
| `photo`       | String  | No       | URL for the laptop photo.     |
| `stock`       | Integer | No       | The number of units in stock. |
| `price`       | Number  | No       | The price of the laptop.      |

**Responses:**

#### **Success (200):**
```json
{
  "message": "Laptop updated successfully",
  "laptop": {
    "_id": "64a61b09c2d7e9ff3a6e1234",
    "name": "Dell Inspiron Updated",
    "description": "Affordable laptop with updated specs",
    "stock": 15,
    "price": 850,
    "photo": "https://example.com/dell-inspiron-updated.jpg",
    "Date_created": "2024-12-18T12:00:00.000Z",
    "Date_updated": "2024-12-19T12:00:00.000Z"
  }
}
```

#### **Error Responses:**

| Status Code | Message                 | Description                                |
| ----------- | ----------------------- | ------------------------------------------ |
| `404`       | "Laptop not found"      | No laptop exists with the given ID.        |
| `500`       | "Internal Server Error" | A server-side error occurred.              |

---

### **6) Delete Laptop by ID**

**Endpoint:**
```
DELETE /laptop/deleteLaptopById/:id
```

**Description:**
Delete a laptop by its unique ID.

**Path Parameters:**

| Parameter | Type   | Required | Description                   |
| --------- | ------ | -------- | ----------------------------- |
| `id`      | String | Yes      | The                           |



### **7)Get Laptops by Category ID**

**Endpoint:**
```
GET /laptop/getLaptopsByCategoryId/:id
```
**Description:**
Retrieve laptops associated with a specific category ID, with optional pagination support.

**Path Parameters:**

| Parameter | Type   | Required | Description                         |
+-----------+--------+----------+-------------------------------------+
| id        | String | Yes      | The unique ID of the category.      |

**Query Parameters**

| Parameter | Type    | Required | Default | Description                                |
+-----------+---------+----------+---------+--------------------------------------------+
| page      | Integer | No       | 1       | The page number to retrieve. Starts at 1.  |
| limit     | Integer | No       | 10      | The number of items to retrieve per page.  |

Response:
{
  "totalLaptops": 15,
  "totalPages": 2,
  "currentPage": 1,
  "laptops": [
    {
      "_id": "64a61b09c2d7e9ff3a6e1234",
      "name": "Dell Inspiron",
      "description": "Affordable laptop",
      "stock": 10,
      "price": 800,
      "photo": "https://example.com/dell-inspiron.jpg",
      "category_id": "63f15d01fabcde1234",
      "Date_created": "2024-12-18T12:00:00.000Z",
      "Date_updated": "2024-12-18T12:00:00.000Z"
    },
    {
      "_id": "64a61b09c2d7e9ff3a6e1235",
      "name": "Dell XPS",
      "description": "High-performance laptop",
      "stock": 5,
      "price": 1500,
      "photo": "https://example.com/dell-xps.jpg",
      "category_id": "63f15d01fabcde1234",
      "Date_created": "2024-12-18T12:00:00.000Z",
      "Date_updated": "2024-12-18T12:00:00.000Z"
    }
  ]
}


### **8)Get Laptops by Brand ID with Pagination**

Endpoint:

GET /laptop/getLaptopsByBrandId/:id

Path Parameters:

+-----------+--------+----------+-------------------------------------+
| Parameter | Type   | Required | Description                         |
+-----------+--------+----------+-------------------------------------+
| id        | String | Yes      | The unique ID of the brand.         |
+-----------+--------+----------+-------------------------------------+

Query Parameters:

+-----------+---------+----------+---------+--------------------------------------------+
| Parameter | Type    | Required | Default | Description                                |
+-----------+---------+----------+---------+--------------------------------------------+
| page      | Integer | No       | 1       | The page number to retrieve. Starts at 1. |
| limit     | Integer | No       | 10      | The number of items to retrieve per page. |
+-----------+---------+----------+---------+--------------------------------------------+

Response:
Success (200):

{
  "totalLaptops": 15,
  "totalPages": 2,
  "currentPage": 1,
  "laptops": [
    {
      "_id": "64a61b09c2d7e9ff3a6e1234",
      "name": "Dell Inspiron",
      "description": "Affordable laptop",
      "stock": 10,
      "price": 800,
      "photo": "https://example.com/dell-inspiron.jpg",
      "brand_id": "63f15d01fabcde1234",
      "Date_created": "2024-12-18T12:00:00.000Z",
      "Date_updated": "2024-12-18T12:00:00.000Z"
    },
    {
      "_id": "64a61b09c2d7e9ff3a6e1235",
      "name": "Dell XPS",
      "description": "High-performance laptop",
      "stock": 5,
      "price": 1500,
      "photo": "https://example.com/dell-xps.jpg",
      "brand_id": "63f15d01fabcde1234",
      "Date_created": "2024-12-18T12:00:00.000Z",
      "Date_updated": "2024-12-18T12:00:00.000Z"
    }
  ]
}

Error Responses:

+-------------+-----------------------------------------+---------------------------------------------+
| Status Code | Message                                 | Description                                 |
+-------------+-----------------------------------------+---------------------------------------------+
| 404         | "No laptops found for this brand"       | No laptops were found for the given brand ID. |
| 500         | "Error fetching laptops by brand"       | A server-side error occurred.              |
+-------------+-----------------------------------------+---------------------------------------------+


--------------------------------------------------------------------------------------

Category APIs:-

### **1) Get All Categories**

**Endpoint:**
```
GET /category/getAllCategories
```

**Description:**
Retrieve a paginated list of all categories.

**Query Parameters:**

| Parameter | Type    | Required | Default | Description                               |
| --------- | ------- | -------- | ------- | ----------------------------------------- |
| `page`    | Integer | No       | `1`     | The page number to retrieve. Starts from 1.|
| `limit`   | Integer | No       | `10`    | The number of items per page.             |

**Responses:**

#### **Success (200):**
```json
{
  "totalCategories": 25,
  "totalPages": 3,
  "currentPage": 1,
  "categories": [
    {
      "_id": "63a1b2c34f8e5c0024c6ef12",
      "name": "Gaming Laptops",
      "Date_created": "2024-12-19T10:10:30.511Z",
      "Date_updated": "2024-12-19T10:10:30.511Z"
    },
    {
      "_id": "63a1b2c34f8e5c0024c6ef13",
      "name": "Business Laptops",
      "Date_created": "2024-12-18T09:15:30.511Z",
      "Date_updated": "2024-12-18T09:15:30.511Z"
    }
  ]
}
```

#### **Error Responses:**

| Status Code | Message                                    | Description                                |
| ----------- | ------------------------------------------ | ------------------------------------------ |
| `404`       | "No categories found"                      | No categories exist in the database.       |
| `500`       | "Error fetching categories"                | A server-side error occurred.              |

---

### **2) Get Category by ID**

**Endpoint:**
```
GET /category/getCategoryById/:id
```

**Description:**
Retrieve a single category by its unique ID.

**Path Parameters:**

| Parameter | Type   | Required | Description                           |
| --------- | ------ | -------- | ------------------------------------- |
| `id`      | String | Yes      | The unique identifier of the category.|

**Responses:**

#### **Success (200):**
```json
{
  "_id": "63a1b2c34f8e5c0024c6ef12",
  "name": "Gaming Laptops",
  "Date_created": "2024-12-19T10:10:30.511Z",
  "Date_updated": "2024-12-19T10:10:30.511Z"
}
```

#### **Error Responses:**

| Status Code | Message                 | Description                          |
| ----------- | ----------------------- | ------------------------------------ |
| `404`       | "Category not found"    | No category exists with the given ID.|
| `500`       | "Error fetching category"| A server-side error occurred.       |

---

### **3) Get Category by Name**

**Endpoint:**
```
GET /category/getCategoryByName/:name
```

**Description:**
Retrieve categories with a matching name (case-insensitive, partial match supported).

**Path Parameters:**

| Parameter | Type   | Required | Description                            |
| --------- | ------ | -------- | -------------------------------------- |
| `name`    | String | Yes      | The partial or full name of a category.|

**Query Parameters:**

| Parameter | Type    | Required | Default | Description                               |
| --------- | ------- | -------- | ------- | ----------------------------------------- |
| `page`    | Integer | No       | `1`     | The page number to retrieve. Starts from 1.|
| `limit`   | Integer | No       | `10`    | The number of items per page.             |

**Responses:**

#### **Success (200):**
```json
{
  "totalCategories": 2,
  "totalPages": 1,
  "currentPage": 1,
  "categories": [
    {
      "_id": "63a1b2c34f8e5c0024c6ef12",
      "name": "Gaming Laptops",
      "Date_created": "2024-12-19T10:10:30.511Z",
      "Date_updated": "2024-12-19T10:10:30.511Z"
    }
  ]
}
```

#### **Error Responses:**

| Status Code | Message                             | Description                                |
| ----------- | ----------------------------------- | ------------------------------------------ |
| `404`       | "No categories found with this name"| No categories matched the search query.    |
| `500`       | "Error fetching categories by name" | A server-side error occurred.              |

---

### **4) Add Category**

**Endpoint:**
```
POST /category/addCategory
```

**Description:**
Create a new category.

**Request Body:**

| Field  | Type   | Required | Description              |
| ------ | ------ | -------- | ------------------------ |
| `name` | String | Yes      | The name of the category.|

**Responses:**

#### **Success (201):**
```json
{
  "message": "Category added successfully",
  "category": {
    "_id": "63a1b2c34f8e5c0024c6ef12",
    "name": "Gaming Laptops",
    "Date_created": "2024-12-19T10:10:30.511Z",
    "Date_updated": "2024-12-19T10:10:30.511Z"
  }
}
```

#### **Error Responses:**

| Status Code | Message                 | Description                      |
| ----------- | ----------------------- | -------------------------------- |
| `400`       | "Error adding category" | Invalid or missing request data. |
| `500`       | "Internal Server Error" | A server-side error occurred.    |

---

### **5) Update Category by ID**

**Endpoint:**
```
PUT /category/updateCategoryById/:id
```

**Description:**
Update the details of a category by its unique ID.

**Path Parameters:**

| Parameter | Type   | Required | Description                           |
| --------- | ------ | -------- | ------------------------------------- |
| `id`      | String | Yes      | The unique identifier of the category.|

**Request Body:**

| Field  | Type   | Required | Description              |
| ------ | ------ | -------- | ------------------------ |
| `name` | String | Yes      | The name of the category.|

**Responses:**

#### **Success (200):**
```json
{
  "message": "Category updated successfully",
  "category": {
    "_id": "63a1b2c34f8e5c0024c6ef12",
    "name": "Premium Gaming Laptops",
    "Date_created": "2024-12-19T10:10:30.511Z",
    "Date_updated": "2024-12-19T10:15:30.511Z"
  }
}
```

#### **Error Responses:**

| Status Code | Message                    | Description                          |
| ----------- | -------------------------- | ------------------------------------ |
| `404`       | "Category not found"       | No category exists with the given ID.|
| `500`       | "Error updating category"  | A server-side error occurred.        |

---

### **6) Delete Category by ID**

**Endpoint:**
```
DELETE /category/deleteCategoryById/:id
```

**Description:**
Delete a category by its unique ID.

**Path Parameters:**

| Parameter | Type   | Required | Description                           |
| --------- | ------ | -------- | ------------------------------------- |
| `id`      | String | Yes      | The unique identifier of the category.|

**Responses:**

#### **Success (200):**
```json
{
  "message": "Category deleted successfully"
}
```

#### **Error Responses:**

| Status Code | Message                    | Description                          |
| ----------- | -------------------------- | ------------------------------------ |
| `404`       | "Category not found"       | No category exists with the given ID.|
| `500`       | "Error deleting category"  | A server-side error occurred.        |

---

### **7) Delete Category by Name**

**Endpoint:**
```
DELETE /category/deleteCategoryByName/:name
```

**Description:**
Delete a category by its exact name.

**Path Parameters:**

| Parameter | Type   | Required | Description                   |
| --------- | ------ | -------- | ----------------------------- |
| `name`    | String | Yes      | The exact name of the category.|

**Responses:**

#### **Success (200):**
```json
{
  "message": "Category deleted successfully"
}
```

#### **Error Responses:**

| Status Code | Message                    | Description                            |
| ----------- | -------------------------- | -------------------------------------- |
| `404`       | "Category not found"       | No category exists with the given name.|
| `500`       | "Error deleting category"  | A server-side error occurred.          |

**Notes:**
- The `Date_updated` field is automatically updated whenever a category is modified
- All name searches are case-insensitive
- Categories must have unique names
- When deleting a category, ensure there are no laptops associated with it to maintain data integrity
--------------------------------------------------------------------------------------

Brand APIs:-

### **1) Get All Brands**

**Endpoint:**
```
GET /brand/getAllBrands
```

**Description:**
Retrieve a paginated list of all brands.

**Query Parameters:**

| Parameter | Type    | Required | Default | Description                               |
| --------- | ------- | -------- | ------- | ----------------------------------------- |
| `page`    | Integer | No       | `1`     | The page number to retrieve. Starts from 1.|
| `limit`   | Integer | No       | `10`    | The number of items per page.             |

**Responses:**

#### **Success (200):**
```json
{
  "totalBrands": 25,
  "totalPages": 3,
  "currentPage": 1,
  "brands": [
    {
      "_id": "63a1b2c34f8e5c0024c6ef12",
      "name": "Dell",
      "Date_created": "2024-12-19T10:10:30.511Z",
      "Date_updated": "2024-12-19T10:10:30.511Z"
    },
    {
      "_id": "63a1b2c34f8e5c0024c6ef13",
      "name": "HP",
      "Date_created": "2024-12-18T09:15:30.511Z",
      "Date_updated": "2024-12-18T09:15:30.511Z"
    }
  ]
}
```

#### **Error Responses:**

| Status Code | Message                 | Description                         |
| ----------- | ----------------------- | ----------------------------------- |
| `500`       | "Error fetching brands" | A server-side error occurred.       |

---

### **2) Get Brand by ID**

**Endpoint:**
```
GET /brand/getBrandById/:id
```

**Description:**
Retrieve a single brand by its unique ID.

**Path Parameters:**

| Parameter | Type   | Required | Description                        |
| --------- | ------ | -------- | ---------------------------------- |
| `id`      | String | Yes      | The unique identifier of the brand.|

**Responses:**

#### **Success (200):**
```json
{
  "_id": "63a1b2c34f8e5c0024c6ef12",
  "name": "Dell",
  "Date_created": "2024-12-19T10:10:30.511Z",
  "Date_updated": "2024-12-19T10:10:30.511Z"
}
```

#### **Error Responses:**

| Status Code | Message                         | Description                       |
| ----------- | ------------------------------- | --------------------------------- |
| `404`       | "Brand not found"               | No brand exists with the given ID.|
| `500`       | "Error fetching brand by ID"    | A server-side error occurred.     |

---

### **3) Get Brands by Name**

**Endpoint:**
```
GET /brand/getBrandsByName/:name
```

**Description:**
Retrieve brands with a matching name (case-insensitive, partial match supported).

**Path Parameters:**

| Parameter | Type   | Required | Description                         |
| --------- | ------ | -------- | ----------------------------------- |
| `name`    | String | Yes      | The partial or full name of a brand.|

**Query Parameters:**

| Parameter | Type    | Required | Default | Description                               |
| --------- | ------- | -------- | ------- | ----------------------------------------- |
| `page`    | Integer | No       | `1`     | The page number to retrieve. Starts from 1.|
| `limit`   | Integer | No       | `10`    | The number of items per page.             |

**Responses:**

#### **Success (200):**
```json
{
  "totalBrands": 2,
  "totalPages": 1,
  "currentPage": 1,
  "brands": [
    {
      "_id": "63a1b2c34f8e5c0024c6ef12",
      "name": "Dell",
      "Date_created": "2024-12-19T10:10:30.511Z",
      "Date_updated": "2024-12-19T10:10:30.511Z"
    }
  ]
}
```

#### **Error Responses:**

| Status Code | Message                          | Description                             |
| ----------- | -------------------------------- | --------------------------------------- |
| `404`       | "No brands found with the given name" | No brands matched the search query.    |
| `500`       | "Error fetching brands by name"  | A server-side error occurred.           |

---

### **4) Add Brand**

**Endpoint:**
```
POST /brand/addBrand
```

**Description:**
Create a new brand.

**Request Body:**

| Field  | Type   | Required | Description           |
| ------ | ------ | -------- | --------------------- |
| `name` | String | Yes      | The name of the brand.|

**Responses:**

#### **Success (201):**
```json
{
  "message": "Brand added successfully",
  "brand": {
    "_id": "63a1b2c34f8e5c0024c6ef12",
    "name": "Dell",
    "Date_created": "2024-12-19T10:10:30.511Z",
    "Date_updated": "2024-12-19T10:10:30.511Z"
  }
}
```

#### **Error Responses:**

| Status Code | Message              | Description                      |
| ----------- | ------------------- | -------------------------------- |
| `500`       | "Error adding brand" | A server-side error occurred.    |

---

### **5) Update Brand by ID**

**Endpoint:**
```
PUT /brand/updateBrandById/:id
```

**Description:**
Update the details of a brand by its unique ID.

**Path Parameters:**

| Parameter | Type   | Required | Description                        |
| --------- | ------ | -------- | ---------------------------------- |
| `id`      | String | Yes      | The unique identifier of the brand.|

**Request Body:**

| Field  | Type   | Required | Description           |
| ------ | ------ | -------- | --------------------- |
| `name` | String | Yes      | The name of the brand.|

**Responses:**

#### **Success (200):**
```json
{
  "message": "Brand updated successfully",
  "brand": {
    "_id": "63a1b2c34f8e5c0024c6ef12",
    "name": "Dell Inc",
    "Date_created": "2024-12-19T10:10:30.511Z",
    "Date_updated": "2024-12-19T10:15:30.511Z"
  }
}
```

#### **Error Responses:**

| Status Code | Message                 | Description                       |
| ----------- | ----------------------- | --------------------------------- |
| `404`       | "Brand not found"       | No brand exists with the given ID.|
| `500`       | "Error updating brand"  | A server-side error occurred.     |

---

### **6) Delete Brand by ID**

**Endpoint:**
```
DELETE /brand/deleteBrandById/:id
```

**Description:**
Delete a brand by its unique ID.

**Path Parameters:**

| Parameter | Type   | Required | Description                        |
| --------- | ------ | -------- | ---------------------------------- |
| `id`      | String | Yes      | The unique identifier of the brand.|

**Responses:**

#### **Success (200):**
```json
{
  "message": "Brand deleted successfully",
  "brand": {
    "_id": "63a1b2c34f8e5c0024c6ef12",
    "name": "Dell",
    "Date_created": "2024-12-19T10:10:30.511Z",
    "Date_updated": "2024-12-19T10:10:30.511Z"
  }
}
```

#### **Error Responses:**

| Status Code | Message                 | Description                       |
| ----------- | ----------------------- | --------------------------------- |
| `404`       | "Brand not found"       | No brand exists with the given ID.|
| `500`       | "Error deleting brand"  | A server-side error occurred.     |

---

### **7) Delete Brand by Name**

**Endpoint:**
```
DELETE /brand/deleteBrandByName/:name
```

**Description:**
Delete a brand by its exact name.

**Path Parameters:**

| Parameter | Type   | Required | Description                |
| --------- | ------ | -------- | -------------------------- |
| `name`    | String | Yes      | The exact name of the brand.|

**Responses:**

#### **Success (200):**
```json
{
  "message": "Brand with name \"[name]\" deleted successfully",
  "brand": {
    "_id": "63a1b2c34f8e5c0024c6ef12",
    "name": "Dell",
    "Date_created": "2024-12-19T10:10:30.511Z",
    "Date_updated": "2024-12-19T10:10:30.511Z"
  }
}
```

#### **Error Responses:**

| Status Code | Message                               | Description                         |
| ----------- | ------------------------------------- | ----------------------------------- |
| `404`       | "No brand found with the given name"  | No brand exists with the given name.|
| `500`       | "Error deleting brand by name"        | A server-side error occurred.       |

**Notes:**
- The `Date_updated` field is automatically updated whenever a brand is modified
- All name searches are case-insensitive
- Brands must have unique names
- When deleting a brand, ensure there are no laptops associated with it to maintain data integrity
----------------------------------------------------------------------------------------------------------------------------

Rate APIs:-

### **1) Get All Rates**

**Endpoint:**
```
GET /rate/getAllRates
```

**Description:**
Retrieve a paginated list of all rates.

**Query Parameters:**

| Parameter | Type    | Required | Default | Description                               |
| --------- | ------- | -------- | ------- | ----------------------------------------- |
| `page`    | Integer | No       | `1`     | The page number to retrieve. Starts from 1.|
| `limit`   | Integer | No       | `10`    | The number of items per page.             |

**Responses:**

#### **Success (200):**
```json
{
  "totalRates": 25,
  "totalPages": 3,
  "currentPage": 1,
  "rates": [
    {
      "_id": "63a1b2c34f8e5c0024c6ef12",
      "rate": 4,
      "comment": "Great laptop, excellent performance",
      "user_id": "507f1f77bcf86cd799439011",
      "laptop_id": "507f1f77bcf86cd799439012",
      "Date_created": "2024-12-19T10:10:30.511Z",
      "Date_updated": "2024-12-19T10:10:30.511Z"
    }
  ]
}
```

#### **Error Responses:**

| Status Code | Message                | Description                   |
| ----------- | ---------------------- | ----------------------------- |
| `500`       | "Error fetching rates" | A server-side error occurred. |

---

### **2) Get Rate by ID**

**Endpoint:**
```
GET /rate/getRateById/:id
```

**Description:**
Retrieve a single rate by its unique ID.

**Path Parameters:**

| Parameter | Type   | Required | Description                       |
| --------- | ------ | -------- | --------------------------------- |
| `id`      | String | Yes      | The unique identifier of the rate.|

**Responses:**

#### **Success (200):**
```json
{
  "_id": "63a1b2c34f8e5c0024c6ef12",
  "rate": 4,
  "comment": "Great laptop, excellent performance",
  "user_id": "507f1f77bcf86cd799439011",
  "laptop_id": "507f1f77bcf86cd799439012",
  "Date_created": "2024-12-19T10:10:30.511Z",
  "Date_updated": "2024-12-19T10:10:30.511Z"
}
```

#### **Error Responses:**

| Status Code | Message                        | Description                      |
| ----------- | ------------------------------ | -------------------------------- |
| `404`       | "Rate not found"               | No rate exists with the given ID.|
| `500`       | "Error fetching rate by ID"    | A server-side error occurred.    |

---

### **3) Get Rates by User ID**

**Endpoint:**
```
GET /rate/getRatesByUserId/:user_id
```

**Description:**
Retrieve all rates submitted by a specific user, with pagination support.

**Path Parameters:**

| Parameter | Type   | Required | Description                       |
| --------- | ------ | -------- | --------------------------------- |
| `user_id` | String | Yes      | The unique identifier of the user.|

**Query Parameters:**

| Parameter | Type    | Required | Default | Description                               |
| --------- | ------- | -------- | ------- | ----------------------------------------- |
| `page`    | Integer | No       | `1`     | The page number to retrieve. Starts from 1.|
| `limit`   | Integer | No       | `10`    | The number of items per page.             |

**Responses:**

#### **Success (200):**
```json
{
  "totalRates": 5,
  "totalPages": 1,
  "currentPage": 1,
  "rates": [
    {
      "_id": "63a1b2c34f8e5c0024c6ef12",
      "rate": 4,
      "comment": "Great laptop, excellent performance",
      "user_id": "507f1f77bcf86cd799439011",
      "laptop_id": "507f1f77bcf86cd799439012",
      "Date_created": "2024-12-19T10:10:30.511Z",
      "Date_updated": "2024-12-19T10:10:30.511Z"
    }
  ]
}
```

#### **Error Responses:**

| Status Code | Message                           | Description                             |
| ----------- | --------------------------------- | --------------------------------------- |
| `500`       | "Error fetching rates by user ID" | A server-side error occurred.           |

---

### **4) Get Rates by Laptop ID**

**Endpoint:**
```
GET /rate/getRatesByLaptopId/:laptop_id
```

**Description:**
Retrieve all rates for a specific laptop, with pagination support.

**Path Parameters:**

| Parameter   | Type   | Required | Description                         |
| ----------- | ------ | -------- | ----------------------------------- |
| `laptop_id` | String | Yes      | The unique identifier of the laptop.|

**Query Parameters:**

| Parameter | Type    | Required | Default | Description                               |
| --------- | ------- | -------- | ------- | ----------------------------------------- |
| `page`    | Integer | No       | `1`     | The page number to retrieve. Starts from 1.|
| `limit`   | Integer | No       | `10`    | The number of items per page.             |

**Responses:**

#### **Success (200):**
```json
{
  "totalRates": 8,
  "totalPages": 1,
  "currentPage": 1,
  "rates": [
    {
      "_id": "63a1b2c34f8e5c0024c6ef12",
      "rate": 4,
      "comment": "Great laptop, excellent performance",
      "user_id": "507f1f77bcf86cd799439011",
      "laptop_id": "507f1f77bcf86cd799439012",
      "Date_created": "2024-12-19T10:10:30.511Z",
      "Date_updated": "2024-12-19T10:10:30.511Z"
    }
  ]
}
```

#### **Error Responses:**

| Status Code | Message                             | Description                   |
| ----------- | ----------------------------------- | ----------------------------- |
| `500`       | "Error fetching rates by laptop ID" | A server-side error occurred. |

---

### **5) Add Rate**

**Endpoint:**
```
POST /rate/addRate
```

**Description:**
Create a new rate for a laptop.

**Request Body:**

| Field       | Type    | Required | Description                                              |
| ----------- | ------- | -------- | -------------------------------------------------------- |
| `rate`      | Number  | Yes      | Rating value (1-5).                                      |
| `comment`   | String  | No       | Optional comment about the rating.                       |
| `user_id`   | String  | Yes      | The unique identifier of the user submitting the rating. |
| `laptop_id` | String  | Yes      | The unique identifier of the laptop being rated.         |

**Responses:**

#### **Success (201):**
```json
{
  "message": "Rating added successfully",
  "rate": {
    "_id": "63a1b2c34f8e5c0024c6ef12",
    "rate": 4,
    "comment": "Great laptop, excellent performance",
    "user_id": "507f1f77bcf86cd799439011",
    "laptop_id": "507f1f77bcf86cd799439012",
    "Date_created": "2024-12-19T10:10:30.511Z",
    "Date_updated": "2024-12-19T10:10:30.511Z"
  }
}
```

#### **Error Responses:**

| Status Code | Message                                         | Description                                           |
| ----------- | ----------------------------------------------- | ----------------------------------------------------- |
| `400`       | "Rate must be between 1 and 5"                  | Invalid rating value provided.                         |
| `400`       | "User has already rated this laptop"            | User has already submitted a rating for this laptop.   |
| `500`       | "Error adding rate"                             | A server-side error occurred.                          |

---

### **6) Update Rate by ID**

**Endpoint:**
```
PUT /rate/updateRateById/:id
```

**Description:**
Update an existing rate by its unique ID.

**Path Parameters:**

| Parameter | Type   | Required | Description                       |
| --------- | ------ | -------- | --------------------------------- |
| `id`      | String | Yes      | The unique identifier of the rate.|

**Request Body:**

| Field     | Type    | Required | Description                        |
| --------- | ------- | -------- | ---------------------------------- |
| `rate`    | Number  | No       | Updated rating value (1-5).        |
| `comment` | String  | No       | Updated comment about the rating.   |

**Responses:**

#### **Success (200):**
```json
{
  "message": "Rate updated successfully",
  "rate": {
    "_id": "63a1b2c34f8e5c0024c6ef12",
    "rate": 5,
    "comment": "Updated: Even better after extended use",
    "user_id": "507f1f77bcf86cd799439011",
    "laptop_id": "507f1f77bcf86cd799439012",
    "Date_created": "2024-12-19T10:10:30.511Z",
    "Date_updated": "2024-12-19T10:15:30.511Z"
  }
}
```

#### **Error Responses:**

| Status Code | Message                       | Description                                  |
| ----------- | ----------------------------- | -------------------------------------------- |
| `404`       | "Rate not found"              | No rate exists with the given ID.            |
| `400`       | "Rate must be between 1 and 5" | Invalid rating value provided.               |
| `500`       | "Error updating rate"         | A server-side error occurred.                |

---

### **7) Delete Rate by ID**

**Endpoint:**
```
DELETE /rate/deleteRateById/:id
```

**Description:**
Delete a rate by its unique ID.

**Path Parameters:**

| Parameter | Type   | Required | Description                       |
| --------- | ------ | -------- | --------------------------------- |
| `id`      | String | Yes      | The unique identifier of the rate.|

**Responses:**

#### **Success (200):**
```json
{
  "message": "Rate deleted successfully",
  "rate": {
    "_id": "63a1b2c34f8e5c0024c6ef12",
    "rate": 4,
    "comment": "Great laptop, excellent performance",
    "user_id": "507f1f77bcf86cd799439011",
    "laptop_id": "507f1f77bcf86cd799439012",
    "Date_created": "2024-12-19T10:10:30.511Z",
    "Date_updated": "2024-12-19T10:10:30.511Z"
  }
}
```

#### **Error Responses:**

| Status Code | Message                | Description                      |
| ----------- | ---------------------- | -------------------------------- |
| `404`       | "Rate not found"       | No rate exists with the given ID.|
| `500`       | "Error deleting rate"  | A server-side error occurred.    |

**Notes:**
- The `Date_updated` field is automatically updated whenever a rate is modified
- Users can only submit one rating per laptop (enforced by a unique compound index)
- Rating values must be between 1 and 5
- Comments are optional
- Both user_id and laptop_id must reference valid existing documents in their respective collections
--------------------------------------------------------------------------------------------------------------------------------



